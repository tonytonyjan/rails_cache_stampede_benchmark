#!/usr/bin/env ruby
# frozen_string_literal: true

# Simulate a cache stampede and print the time when the cache is regenerated.

require 'bundler/setup'
Bundler.require(:default)
require_relative '../lib/active_support_cache_store_extension'
require_relative '../lib/random_exponential'
require 'etc'

TTL = ENV.fetch('TTL', '15').to_f
REGENERATION_TIME = ENV.fetch('REGENERATION_TIME', '1').to_f
NUMBER_OF_THREADS = ENV.fetch('NUMBER_OF_THREADS', Etc.nprocessors).to_i
TIMEOUT = ENV.fetch('TIMEOUT', '60').to_i
REDIS_URL = ENV.fetch('REDIS_URL', 'redis://localhost')
FETCH_METHOD = ENV.fetch('FETCH_METHOD', 'x_fetch').to_sym
RPM = ENV.fetch('RPM', '200000').to_f

ActiveSupport::Deprecation.behavior = :silence

CACHE = ActiveSupport::Cache::RedisCacheStore.new(url: REDIS_URL, pool: { size: NUMBER_OF_THREADS })
CACHE_KEY = [FETCH_METHOD, RPM].join(':')
CACHE.delete(CACHE_KEY)

threads = []
start = Time.now
CACHE.send(FETCH_METHOD, CACHE_KEY, expires_in: TTL, race_condition_ttl: REGENERATION_TIME * 2) do
  sleep REGENERATION_TIME
end
NUMBER_OF_THREADS.times do
  threads << Thread.new do
    rng = RandomExponential.new(rate: RPM / NUMBER_OF_THREADS / 60)
    loop do
      break if Time.now - start > TIMEOUT

      CACHE.send(FETCH_METHOD, CACHE_KEY, expires_in: TTL, race_condition_ttl: REGENERATION_TIME * 2) do
        puts Time.now.to_f
        sleep REGENERATION_TIME
      end
      sleep_time = rng.rand
      sleep sleep_time if sleep_time.positive?
    end
  end
end
threads.each(&:join)
